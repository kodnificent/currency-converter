"use strict";

var key = '83f45781b9cd2d13dd16';
var api = 'https://free.currconv.com/api/v7';
var form = document.querySelector('#screen-form');
var selTo = form.querySelector('select[name=countries-to]');
var selFrom = form.querySelector('select[name=countries-from]');
var input = form.querySelector('input[name=amount]');
var result = document.querySelector('#result');
var rate = document.querySelector('#rate');
var image = './assets/imgs/flags';
var locale = 'en-US';
var formatterOpts = {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 6
};

function updateResult(total) {
  var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  total = new Intl.NumberFormat(locale, formatterOpts).format(total);
  result.setAttribute('data-result', total);
  result.innerText = total;

  if (r) {
    rate.innerText = "".concat(r.toFixed(), " ").concat(selFrom.value, " per ").concat(selTo.value);
  } else {
    rate.innerText = '';
  }
}

function convertCurrency() {
  var from = selFrom.value.toUpperCase();
  var to = selTo.value.toUpperCase();
  var amount = input.value;
  var rate, total;

  if (amount > 0) {
    var convert = fetch("".concat(api, "/convert?apiKey=").concat(key, "&q=").concat(from, "_").concat(to, "&compact=ultra")); //start spinner

    convert.then(function (result) {
      return result.json();
    }).then(function (data) {
      rate = data["".concat(from, "_").concat(to)];
      total = amount * rate;
      updateResult(total, rate);
    })["catch"](function (err) {
      console.log(error);
    })["finally"](function () {// stop spinner
    });
  } else {
    console.log('amount is less than zero');
    updateResult(0);
  }
}

function getCurrencies() {
  // load all currencies
  var getCurrencies = fetch("".concat(api, "/currencies?apiKey=").concat(key));
  getCurrencies.then(function (response) {
    return response.json();
  }).then(function (currencies) {
    // store the currencies in an array so we can sort it alphabetically
    var arr = Object.keys(currencies.results);
    arr = arr.sort();
    var id = 0;
    var selIndex = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _key = _step.value;
        var currency = currencies.results[_key];
        var option = document.createElement('option');
        option.value = currency.id.toLowerCase();
        option.setAttribute('data-id', ++id);
        option.setAttribute('data-image', "".concat(image, "/").concat(currency.id.toLowerCase(), ".png"));
        option.text = currency.id;
        selTo.appendChild(option); // use usd as selected index

        if (currency.id == 'USD') {
          selIndex = id - 1;
          selTo.selectedIndex = selIndex;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return currencies;
  }).then(function (currencies) {
    var arr = Object.keys(currencies.results);
    arr = arr.sort();
    var id = 0;
    var selIndex = 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _key2 = _step2.value;
        var currency = currencies.results[_key2];
        var option = document.createElement('option');
        option.value = currency.id.toLowerCase();
        option.setAttribute('data-id', ++id);
        option.setAttribute('data-image', "".concat(image, "/").concat(currency.id.toLowerCase(), ".png"));
        option.text = currency.id;
        selFrom.appendChild(option); // use usd as selected index

        if (currency.id == 'GBP') {
          selIndex = id - 1;
          selFrom.selectedIndex = selIndex;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return;
  }).then(function () {
    return new Selectjs();
  })["catch"](function (err) {
    console.log(err);
  });
}

;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
