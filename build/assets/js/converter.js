"use strict";

var key = '83f45781b9cd2d13dd16';
var api = 'https://free.currconv.com/api/v7';
var form = document.querySelector('#screen-form');
var selTo = form.querySelector('select[name=countries-to]');
var selFrom = form.querySelector('select[name=countries-from]');
var input = form.querySelector('input[name=amount]');
var result = document.querySelector('#result');
var rate = document.querySelector('#rate');
var lastUp = document.querySelector('#last-update');
var image = './assets/imgs/flags';
var locale = 'en-US';
var formatterOpts = {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2
};
/**
 * Update the app with the total result obtained after conversion
 * @param {Number} total The total output of the result
 * @param {Number|null} r the rate at which the currency was converted
 * @param {Number} time last update timestamp
 */

function updateResult(total, time) {
  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  total = new Intl.NumberFormat(locale, formatterOpts).format(total);
  result.setAttribute('data-result', total);
  result.innerText = total;

  if (r) {
    rate.innerText = "".concat(r.toFixed(2), " ").concat(selFrom.value, " per ").concat(selTo.value);
  } else {
    rate.innerText = '';
  }

  lastUp.innerText = time ? timeDiff(time) : '';
}
/**
 * Convert between currencies. 
 * This function will be probably called when button input is made
 */


function convertCurrency() {
  var from = selFrom.value.toUpperCase();
  var to = selTo.value.toUpperCase();
  var amount = input.value;
  var timestamp = new Date().getTime();
  var query = "".concat(from, "_").concat(to);
  var rate, total; // we don't want to perform any conversion if we have a zero amount or we are converting between the same currency

  if (amount > 0 && from != to) {
    // we have just 100 requests per hour on the free currency converter plan. We have to use it wisely
    // check the database for rate and use the rate found in the database
    var dbPromise = database();
    dbPromise.then(function (db) {
      var tx = db.transaction('rates');
      var rates = tx.objectStore('rates');
      return rates.get(query);
    }).then(function (result) {
      // if there was no result from the database query fetch from the network
      if (!result) return fetch("".concat(api, "/convert?apiKey=").concat(key, "&q=").concat(query, "&compact=ultra"));
      var dbRate = result.rate;
      console.log('using rate from database');
      rate = dbRate;
      total = amount * rate;
      updateResult(total, result.timestamp, rate);
    }).then(function (result) {
      if (!result) return; // do nothing if no fetch to the network was made

      console.log('fetched rate from network');
      return result.json();
    }).then(function (data) {
      if (!data) return;
      if (data.error) throw new Error('free api limit reached'); //data error could be "Free API limit reached"

      rate = data[query];
      total = amount * rate;
      updateResult(total, timestamp, rate);
      return database();
    }).then(function (db) {
      if (!db) return;
      var tx = db.transaction('rates', 'readwrite');
      tx.objectStore('rates').put({
        query: query,
        rate: rate,
        timestamp: timestamp
      });
      return tx.complete;
    }).then(function () {
      console.log('updating table');
    })["catch"](function (err) {
      console.info(err);
    })["finally"](function () {// stop spinner
    });
  } else {
    // no input or input is less than 0
    updateResult(0);
  }
}
/**
 * Get all currencies and its neccessary details from our api
 */


function getCurrencies() {
  // load all currencies
  var getCurrencies = fetch("".concat(api, "/currencies?apiKey=").concat(key));
  getCurrencies.then(function (response) {
    return response.json();
  }).then(function (currencies) {
    if (currencies.error) throw new Error('free api limit reached'); // currencies.error could be "free api limit reached"
    // store the currencies in an array so we can sort it alphabetically

    var arr = Object.keys(currencies.results);
    arr = arr.sort();
    var id = 0;
    var selIndex = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _key = _step.value;
        var currency = currencies.results[_key];
        var option = document.createElement('option');
        option.value = currency.id.toLowerCase();
        option.setAttribute('data-id', ++id);
        option.setAttribute('data-image', "".concat(image, "/").concat(currency.id.toLowerCase(), ".png"));
        option.text = currency.id;
        selTo.appendChild(option); // use usd as selected index

        if (currency.id == 'USD') {
          selIndex = id - 1;
          selTo.selectedIndex = selIndex;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return currencies;
  }).then(function (currencies) {
    var arr = Object.keys(currencies.results);
    arr = arr.sort();
    var id = 0;
    var selIndex = 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _key2 = _step2.value;
        var currency = currencies.results[_key2];
        var option = document.createElement('option');
        option.value = currency.id.toLowerCase();
        option.setAttribute('data-id', ++id);
        option.setAttribute('data-image', "".concat(image, "/").concat(currency.id.toLowerCase(), ".png"));
        option.text = currency.id;
        selFrom.appendChild(option); // use usd as selected index

        if (currency.id == 'GBP') {
          selIndex = id - 1;
          selFrom.selectedIndex = selIndex;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return;
  }).then(function () {
    // re instantiate the select js class to update the custom select div with currencies
    return new Selectjs();
  })["catch"](function (err) {
    console.info(err);
  });
}

;

function timeDiff(then) {
  if (!then) throw new Error('parameter 1 required');
  if (!then instanceof Date || typeof then !== 'number') throw new Error('parameter 1 should be an instance of Date or a number type');
  var now = new Date().getTime();
  then = then instanceof Date ? then.getTime() : then;
  var secDiff = parseInt((now - then) / 1000); //convert from milliseconds to seconds

  var perMin = 60;
  var perHour = perMin * 60;
  var perDay = perHour * 24;
  var perWeek = perDay * 7;
  var perMonth = perWeek * 4;
  var perYear = perMonth * 12;
  var timeDiff;

  switch (true) {
    case secDiff === 0:
      timeDiff = 'now';
      break;

    case secDiff < perMin:
      // less than a min
      timeDiff = "".concat(secDiff, "s ago");
      break;

    case secDiff < perHour:
      // less than an hour
      timeDiff = "".concat(parseInt(secDiff / perMin), "m ago");
      break;

    case secDiff < perDay:
      // less than a day
      timeDiff = "".concat(parseInt(secDiff / perHour), "h ago");
      break;

    case secDiff < perWeek:
      timeDiff = "".concat(parseInt(secDiff / perDay), "d ago");
      break;

    case secDiff < perMonth:
      timeDiff = "".concat(parseInt(secDiff / perWeek), "w ago");
      break;

    case secDiff < perYear:
      timeDiff = "".concat(parseInt(secDiff / perWeek), "mth ago");
      break;

    case secDiff >= perYear:
      timeDiff = "".concat(parseInt(secDiff / perYear), "y ago"); //@todo get stuffs like 1y6mth ago
      //tip: if secDiff/perYear is not a whole number then convert the remaining decimal to months

      break;
  }

  return timeDiff;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
