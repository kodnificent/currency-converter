"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Selectjs =
/*#__PURE__*/
function () {
  function Selectjs() {
    var _this = this;

    _classCallCheck(this, Selectjs);

    this.selectDivs = document.querySelectorAll('.select-js');
    if (!this.selectDivs) return;
    this.selectDivs.forEach(function (el) {
      _this.updateCustomSelect(el); // add click event to toggle select


      var cOption = el.querySelector('.current-option');

      cOption.onclick = function (e) {
        e.stopPropagation();
        return _this.toggleSelect(el);
      };

      var options = el.querySelectorAll('.custom-option');
      options.forEach(function (option) {
        option.onclick = function (e) {
          e.stopPropagation();

          _this.select(el, e.currentTarget); //loop through all options and deselect options that was clicked


          _this.closeAllSelect();
        };
      });
    }, this); // close all select box when clicked outside the box

    document.onclick = function (e) {
      return _this.closeAllSelect();
    };
  }
  /**
   * Update the custom select with data from the native select element
   * @param {Element} el  the target div element
   */


  _createClass(Selectjs, [{
    key: "updateCustomSelect",
    value: function updateCustomSelect(el) {
      var cOption, cOptionImage, cOptionData, selected, ul, sel;
      sel = el.querySelector('select');
      if (!sel) return;
      selected = sel[sel.selectedIndex]; // current option div

      cOption = document.createElement('div');
      cOption.className = 'current-option';
      cOption.setAttribute('aria-hidden', 'true');
      cOption.setAttribute('data-id', selected.getAttribute('data-id'));
      cOption.setAttribute('data-value', selected.value);
      cOptionImage = document.createElement('img');
      cOptionImage.src = selected.getAttribute('data-image');
      cOptionImage.className = 'option-image';
      cOptionData = document.createElement('span');
      cOptionData.className = 'option-data';
      cOptionData.innerText = selected.text;
      cOption.appendChild(cOptionImage);
      cOption.appendChild(cOptionData);
      el.appendChild(cOption); // custom select div

      ul = document.createElement('ul');
      ul.setAttribute('aria-hidden', 'true');
      ul.setAttribute('data-open', 'false');
      ul.className = 'custom-select';
      var options = sel.querySelectorAll('option');
      options.forEach(function (el) {
        var li = document.createElement('li');
        li.className = 'custom-option';
        li.setAttribute('data-id', el.getAttribute('data-id'));
        li.setAttribute('data-value', el.value);

        if (el.getAttribute('data-id') === selected.getAttribute('data-id')) {
          li.setAttribute('data-selected', 'true');
        }

        if (el.hasAttribute('data-image')) {
          var img = document.createElement('img');
          img.src = el.getAttribute('data-image');
          img.className = 'option-image';
          li.appendChild(img);
        }

        var span = document.createElement('span');
        span.className = 'option-data';
        span.innerText = el.text;
        li.appendChild(span);
        ul.appendChild(li);
      }); //@TODO perform keyboard filter search
      //document.onkeydown = e=>{
      //}

      el.appendChild(ul); // scroll to selected option

      var li = ul.querySelector('[data-selected=true]');
      ul.scroll(0, li.offsetTop);
    }
    /**
     * Perform select operation
     * @param {Element} el target select div element
     * @param {Element} option clicked custom-option element
     */

  }, {
    key: "select",
    value: function select(el, option) {
      var id = option.getAttribute('data-id');
      var value = option.getAttribute('data-value');
      var nativeSelect = el.querySelector('select');
      var cOption = el.querySelector('.current-option');
      cOption.querySelector('.option-data').textContent = option.querySelector('.option-data').textContent;
      cOption.querySelector('.option-image').src = option.querySelector('.option-image').src;
      cOption.setAttribute('data-id', id);
      nativeSelect.value = value;
      option.setAttribute('data-selected', 'true');
      var options = el.querySelectorAll('.custom-option');
      options.forEach(function (opt) {
        if (opt.getAttribute('data-id') === id) return;
        opt.setAttribute('data-selected', 'false');
      }); // create a change event for the select element

      var evt = new Event('change');
      nativeSelect.dispatchEvent(evt);
    }
  }, {
    key: "toggleSelect",
    value: function toggleSelect(el) {
      //first close all select boxes
      this.closeAllSelect(el); // now toggle current select

      var customSelect = el.querySelector('.custom-select');
      if (!customSelect) return;

      if (customSelect.getAttribute('data-open') === 'false') {
        customSelect.setAttribute('data-open', 'true');
      } else if (customSelect.getAttribute('data-open') === 'true') {
        customSelect.setAttribute('data-open', 'false');
      }

      return this;
    }
  }, {
    key: "closeAllSelect",
    value: function closeAllSelect() {
      var currentEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      this.selectDivs.forEach(function (el) {
        if (currentEl && currentEl === el) return;
        var customSelect = el.querySelector('.custom-select');
        if (!customSelect) return;
        customSelect.setAttribute('data-open', 'false');
      });
    }
  }]);

  return Selectjs;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdC5qcyJdLCJuYW1lcyI6WyJTZWxlY3RqcyIsInNlbGVjdERpdnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWwiLCJ1cGRhdGVDdXN0b21TZWxlY3QiLCJjT3B0aW9uIiwicXVlcnlTZWxlY3RvciIsIm9uY2xpY2siLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwidG9nZ2xlU2VsZWN0Iiwib3B0aW9ucyIsIm9wdGlvbiIsInNlbGVjdCIsImN1cnJlbnRUYXJnZXQiLCJjbG9zZUFsbFNlbGVjdCIsImNPcHRpb25JbWFnZSIsImNPcHRpb25EYXRhIiwic2VsZWN0ZWQiLCJ1bCIsInNlbCIsInNlbGVjdGVkSW5kZXgiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwidmFsdWUiLCJzcmMiLCJpbm5lclRleHQiLCJ0ZXh0IiwiYXBwZW5kQ2hpbGQiLCJsaSIsImhhc0F0dHJpYnV0ZSIsImltZyIsInNwYW4iLCJzY3JvbGwiLCJvZmZzZXRUb3AiLCJpZCIsIm5hdGl2ZVNlbGVjdCIsInRleHRDb250ZW50Iiwib3B0IiwiZXZ0IiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY3VzdG9tU2VsZWN0IiwiY3VycmVudEVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztJQUFNQSxROzs7QUFDRixzQkFBYTtBQUFBOztBQUFBOztBQUNULFNBQUtDLFVBQUwsR0FBa0JDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsWUFBMUIsQ0FBbEI7QUFDQSxRQUFHLENBQUMsS0FBS0YsVUFBVCxFQUFxQjtBQUNyQixTQUFLQSxVQUFMLENBQWdCRyxPQUFoQixDQUF3QixVQUFBQyxFQUFFLEVBQUU7QUFDeEIsTUFBQSxLQUFJLENBQUNDLGtCQUFMLENBQXdCRCxFQUF4QixFQUR3QixDQUd4Qjs7O0FBQ0EsVUFBSUUsT0FBTyxHQUFHRixFQUFFLENBQUNHLGFBQUgsQ0FBaUIsaUJBQWpCLENBQWQ7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RUFBOUIsRUFBa0M7QUFDbEMsWUFBSXlDLFlBQVksR0FBR3pDLEVBQUUsQ0FBQ0csYUFBSCxDQUFpQixnQkFBakIsQ0FBbkI7QUFDQSxZQUFHLENBQUNzQyxZQUFKLEVBQWtCO0FBQ2xCQSxRQUFBQSxZQUFZLENBQUNwQixZQUFiLENBQTBCLFdBQTFCLEVBQXVDLE9BQXZDO0FBQ0gsT0FMRDtBQU1IIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU2VsZWN0anMge1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLnNlbGVjdERpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsZWN0LWpzJyk7XHJcbiAgICAgICAgaWYoIXRoaXMuc2VsZWN0RGl2cykgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0RGl2cy5mb3JFYWNoKGVsPT57XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VzdG9tU2VsZWN0KGVsKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGFkZCBjbGljayBldmVudCB0byB0b2dnbGUgc2VsZWN0XHJcbiAgICAgICAgICAgIGxldCBjT3B0aW9uID0gZWwucXVlcnlTZWxlY3RvcignLmN1cnJlbnQtb3B0aW9uJyk7XHJcbiAgICAgICAgICAgIGNPcHRpb24ub25jbGljayA9IChlKT0+e1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZVNlbGVjdChlbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gZWwucXVlcnlTZWxlY3RvckFsbCgnLmN1c3RvbS1vcHRpb24nKTtcclxuICAgICAgICAgICAgb3B0aW9ucy5mb3JFYWNoKG9wdGlvbj0+e1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLm9uY2xpY2sgPSBlID0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QoZWwsIGUuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggYWxsIG9wdGlvbnMgYW5kIGRlc2VsZWN0IG9wdGlvbnMgdGhhdCB3YXMgY2xpY2tlZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VBbGxTZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBjbG9zZSBhbGwgc2VsZWN0IGJveCB3aGVuIGNsaWNrZWQgb3V0c2lkZSB0aGUgYm94XHJcbiAgICAgICAgZG9jdW1lbnQub25jbGljayA9IChlKT0+e1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZUFsbFNlbGVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgY3VzdG9tIHNlbGVjdCB3aXRoIGRhdGEgZnJvbSB0aGUgbmF0aXZlIHNlbGVjdCBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsICB0aGUgdGFyZ2V0IGRpdiBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUN1c3RvbVNlbGVjdChlbCl7XHJcbiAgICAgICAgbGV0IGNPcHRpb24sIGNPcHRpb25JbWFnZSwgY09wdGlvbkRhdGEsIHNlbGVjdGVkLCB1bCwgc2VsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNlbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCcpO1xyXG4gICAgICAgIGlmKCFzZWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgc2VsZWN0ZWQgPSBzZWxbc2VsLnNlbGVjdGVkSW5kZXhdO1xyXG5cclxuICAgICAgICAvLyBjdXJyZW50IG9wdGlvbiBkaXZcclxuICAgICAgICBjT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY09wdGlvbi5jbGFzc05hbWUgPSAnY3VycmVudC1vcHRpb24nO1xyXG4gICAgICAgIGNPcHRpb24uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgICAgY09wdGlvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBzZWxlY3RlZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XHJcbiAgICAgICAgY09wdGlvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBzZWxlY3RlZC52YWx1ZSk7XHJcblxyXG4gICAgICAgIGNPcHRpb25JbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIGNPcHRpb25JbWFnZS5zcmMgPSBzZWxlY3RlZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW1hZ2UnKTtcclxuICAgICAgICBjT3B0aW9uSW1hZ2UuY2xhc3NOYW1lID0gJ29wdGlvbi1pbWFnZSc7XHJcblxyXG4gICAgICAgIGNPcHRpb25EYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIGNPcHRpb25EYXRhLmNsYXNzTmFtZSA9ICdvcHRpb24tZGF0YSc7XHJcbiAgICAgICAgY09wdGlvbkRhdGEuaW5uZXJUZXh0PSBzZWxlY3RlZC50ZXh0O1xyXG5cclxuICAgICAgICBjT3B0aW9uLmFwcGVuZENoaWxkKGNPcHRpb25JbWFnZSk7XHJcbiAgICAgICAgY09wdGlvbi5hcHBlbmRDaGlsZChjT3B0aW9uRGF0YSk7XHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY09wdGlvbik7XHJcblxyXG4gICAgICAgIC8vIGN1c3RvbSBzZWxlY3QgZGl2XHJcbiAgICAgICAgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG4gICAgICAgIHVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gICAgICAgIHVsLnNldEF0dHJpYnV0ZSgnZGF0YS1vcGVuJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgdWwuY2xhc3NOYW1lID0gJ2N1c3RvbS1zZWxlY3QnO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHNlbC5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb24nKTtcclxuICAgICAgICBvcHRpb25zLmZvckVhY2goZWw9PntcclxuICAgICAgICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgbGkuY2xhc3NOYW1lID0gJ2N1c3RvbS1vcHRpb24nO1xyXG4gICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XHJcbiAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIGVsLnZhbHVlKTtcclxuICAgICAgICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgPT09IHNlbGVjdGVkLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2VsZWN0ZWQnLCd0cnVlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWltYWdlJykpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pbWFnZScpO1xyXG4gICAgICAgICAgICAgICAgaW1nLmNsYXNzTmFtZSA9ICdvcHRpb24taW1hZ2UnO1xyXG4gICAgICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgc3Bhbi5jbGFzc05hbWUgPSAnb3B0aW9uLWRhdGEnO1xyXG4gICAgICAgICAgICBzcGFuLmlubmVyVGV4dCA9IGVsLnRleHQ7XHJcbiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKHNwYW4pO1xyXG5cclxuICAgICAgICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL0BUT0RPIHBlcmZvcm0ga2V5Ym9hcmQgZmlsdGVyIHNlYXJjaFxyXG4gICAgICAgIC8vZG9jdW1lbnQub25rZXlkb3duID0gZT0+e1xyXG4gICAgICAgIC8vfVxyXG5cclxuICAgICAgICBlbC5hcHBlbmRDaGlsZCh1bCk7XHJcblxyXG4gICAgICAgIC8vIHNjcm9sbCB0byBzZWxlY3RlZCBvcHRpb25cclxuICAgICAgICBsZXQgbGkgPSB1bC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zZWxlY3RlZD10cnVlXScpO1xyXG4gICAgICAgIHVsLnNjcm9sbCgwLCBsaS5vZmZzZXRUb3ApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBzZWxlY3Qgb3BlcmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIHRhcmdldCBzZWxlY3QgZGl2IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gb3B0aW9uIGNsaWNrZWQgY3VzdG9tLW9wdGlvbiBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHNlbGVjdChlbCwgb3B0aW9uKXtcclxuICAgICAgICBsZXQgaWQgPSBvcHRpb24uZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gb3B0aW9uLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xyXG4gICAgICAgIGxldCBuYXRpdmVTZWxlY3QgPSBlbC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKTtcclxuICAgICAgICBsZXQgY09wdGlvbiA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5jdXJyZW50LW9wdGlvbicpO1xyXG5cclxuICAgICAgICBjT3B0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5vcHRpb24tZGF0YScpLnRleHRDb250ZW50ID0gb3B0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5vcHRpb24tZGF0YScpLnRleHRDb250ZW50O1xyXG4gICAgICAgIGNPcHRpb24ucXVlcnlTZWxlY3RvcignLm9wdGlvbi1pbWFnZScpLnNyYyA9IG9wdGlvbi5xdWVyeVNlbGVjdG9yKCcub3B0aW9uLWltYWdlJykuc3JjO1xyXG4gICAgICAgIGNPcHRpb24uc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaWQpO1xyXG4gICAgICAgIG5hdGl2ZVNlbGVjdC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jdXN0b20tb3B0aW9uJyk7XHJcbiAgICAgICAgb3B0aW9ucy5mb3JFYWNoKG9wdD0+e1xyXG4gICAgICAgICAgICBpZihvcHQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgPT09IGlkKSByZXR1cm47XHJcbiAgICAgICAgICAgIG9wdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIGEgY2hhbmdlIGV2ZW50IGZvciB0aGUgc2VsZWN0IGVsZW1lbnRcclxuICAgICAgICBjb25zdCBldnQgPSBuZXcgRXZlbnQoJ2NoYW5nZScpO1xyXG4gICAgICAgIG5hdGl2ZVNlbGVjdC5kaXNwYXRjaEV2ZW50KGV2dCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRvZ2dsZVNlbGVjdChlbCl7XHJcbiAgICAgICAgLy9maXJzdCBjbG9zZSBhbGwgc2VsZWN0IGJveGVzXHJcbiAgICAgICAgdGhpcy5jbG9zZUFsbFNlbGVjdChlbCk7XHJcblxyXG4gICAgICAgIC8vIG5vdyB0b2dnbGUgY3VycmVudCBzZWxlY3RcclxuICAgICAgICBsZXQgY3VzdG9tU2VsZWN0ID0gZWwucXVlcnlTZWxlY3RvcignLmN1c3RvbS1zZWxlY3QnKTtcclxuICAgICAgICBpZighY3VzdG9tU2VsZWN0KSByZXR1cm47XHJcbiAgICAgICAgaWYoY3VzdG9tU2VsZWN0LmdldEF0dHJpYnV0ZSgnZGF0YS1vcGVuJykgPT09ICdmYWxzZScpe1xyXG4gICAgICAgICAgICBjdXN0b21TZWxlY3Quc2V0QXR0cmlidXRlKCdkYXRhLW9wZW4nLCAndHJ1ZScpO1xyXG4gICAgICAgIH0gZWxzZSBpZihjdXN0b21TZWxlY3QuZ2V0QXR0cmlidXRlKCdkYXRhLW9wZW4nKSA9PT0gJ3RydWUnKXtcclxuICAgICAgICAgICAgY3VzdG9tU2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1vcGVuJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlQWxsU2VsZWN0KGN1cnJlbnRFbCA9IG51bGwpe1xyXG4gICAgICAgIHRoaXMuc2VsZWN0RGl2cy5mb3JFYWNoKGVsPT57XHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnRFbCAmJiBjdXJyZW50RWwgPT09IGVsKSByZXR1cm47XHJcbiAgICAgICAgICAgIGxldCBjdXN0b21TZWxlY3QgPSBlbC5xdWVyeVNlbGVjdG9yKCcuY3VzdG9tLXNlbGVjdCcpO1xyXG4gICAgICAgICAgICBpZighY3VzdG9tU2VsZWN0KSByZXR1cm47XHJcbiAgICAgICAgICAgIGN1c3RvbVNlbGVjdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3BlbicsICdmYWxzZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il0sImZpbGUiOiJzZWxlY3QuanMifQ==
